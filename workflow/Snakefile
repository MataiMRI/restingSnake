configfile: 'config/config.yaml'

module tidy_snake:
    snakefile:
        github("MataiMRI/tidySnake", path="workflow/Snakefile", tag="v0.7.0")
    config: config

use rule * from tidy_snake as tidy_snake_*

RUNS, TEMPLATES = tidy_snake.list_valid_runs(config["resultsdir"], suffix="_bold")

NETWORKS = [
    network.replace(' ', '-')
    for network in config["first_level"]["atlas_info"]["networks"]
]

rule all:
    localrule: True
    default_target: True
    input:
        rules.tidy_snake_all.input,
        expand(
            expand(
                "{{resultsdir}}/first_level_results/sub-{subject}/ses-{session}/"
                "sub-{subject}_ses-{session}_{entity}_network-{{network}}_{{suffix}}",
                zip,
                subject=RUNS.subjects,
                session=RUNS.sessions,
                entity=RUNS.entities,
            ),
            resultsdir=config["resultsdir"],
            network=NETWORKS,
            suffix=["unthresholded_fc.nii.gz", "figure.png"],
        ),

ruleorder: freesurfer_longitudinal > freesurfer_long_template > freesurfer_cross_sectional

wildcard_constraints:
    # Ensure proper matching in patterns containing "ses-{session}_{entity}",
    # where {entity} can contain multiple BIDS entities. For example, in
    # "ses-a_task-rest_run-001", session is "a" and entity is "task-rest_run-001"
    session="[^-]"

rule freesurfer_cross_sectional:
    input:
        "{resultsdir}/bids/sub-{subject}/ses-{session}"
    output:
        directory("{resultsdir}/bids/derivatives/freesurfer/sub-{subject}_ses-{session}_{entity}")
    container:
        "docker://nipreps/fmriprep:23.1.3"
    resources:
        cpus=lambda wildcards, threads: threads,
        mem_mb=config["freesurfer"]["mem_mb"],
        runtime=config["freesurfer"]["time_min"]
    threads: config["freesurfer"]["threads"]
    shell:
        "export FS_LICENSE=$(realpath {config[freesurfer][license_path]}) && "
        "recon-all "
        "-sd {wildcards.resultsdir}/bids/derivatives/freesurfer "
        "-i {input}/anat/sub-{wildcards.subject}_ses-{wildcards.session}_{wildcards.entity}_T1w.nii.gz "
        "-subjid sub-{wildcards.subject}_ses-{wildcards.session}_{wildcards.entity} "
        "-all "
        "-3T "
        "-openmp {threads}"

def list_freesurfer_templates(wildcards):
    inputs = [
        f"{wildcards.resultsdir}/bids/derivatives/freesurfer/{template}"
        for template in set(TEMPLATES[wildcards.subject].values())
    ]
    return inputs

def list_freesurfer_timepoints(wildcards):
    inputs = sorted(set(TEMPLATES[wildcards.subject].values()))
    tps = " ".join(f"-tp {template}" for template in inputs)
    return tps

rule freesurfer_long_template:
    input:
        list_freesurfer_templates
    output:
        directory("{resultsdir}/bids/derivatives/freesurfer/{subject}_template")
    container:
        "docker://nipreps/fmriprep:23.1.3"
    params:
        license_path=config["freesurfer"]["license_path"],
        timepoints=list_freesurfer_timepoints
    resources:
        cpus=lambda wildcards, threads: threads,
        mem_mb=config["freesurfer"]["mem_mb"],
        runtime=config["freesurfer"]["time_min"]
    threads: config["freesurfer"]["threads"]
    shell:
        "export FS_LICENSE=$(realpath {params.license_path}) && "
        "recon-all "
        "-base {wildcards.subject}_template "
        "{params.timepoints} "
        "-sd {wildcards.resultsdir}/bids/derivatives/freesurfer "
        "-all "
        "-3T "
        "-openmp {threads}"

rule freesurfer_longitudinal:
    input:
        "{resultsdir}/bids/sub-{subject}/ses-{session}",
        "{resultsdir}/bids/derivatives/freesurfer/{subject}_template"
    output:
        directory("{resultsdir}/bids/derivatives/freesurfer/sub-{subject}_ses-{session}_{entity}.long.{subject}_template")
    container:
        "docker://nipreps/fmriprep:23.1.3"
    params:
        license_path=config["freesurfer"]["license_path"],
    resources:
        cpus=lambda wildcards, threads: threads,
        mem_mb=config["freesurfer"]["mem_mb"],
        runtime=config["freesurfer"]["time_min"]
    threads: config["freesurfer"]["threads"]
    shell:
        "export FS_LICENSE=$(realpath {params.license_path}) && "
        "recon-all "
        "-long sub-{wildcards.subject}_ses-{wildcards.session}_{wildcards.entity} "
        "{wildcards.subject}_template "
        "-sd {wildcards.resultsdir}/bids/derivatives/freesurfer "
        "-all "
        "-qcache "
        "-3T "
        "-openmp {threads}"

def freesurfer_rename_input(wildcards):
    """find the required freesurfer output required for a subject/session pair"""

    if config["use_longitudinal"]:
        suffix = f".long.{wildcards.subject}_template"
    else:
        suffix = ""

    anat_template = TEMPLATES[wildcards.subject][wildcards.session]

    return f"{wildcards.resultsdir}/bids/derivatives/freesurfer/{anat_template}{suffix}"

rule freesurfer_rename:
    localrule: True
    input:
        freesurfer_rename_input
    output:
        temp(directory("{resultsdir}/bids/derivatives/freesurfer_sub-{subject}_ses-{session}"))
    shell:
        "mkdir -p {output} && ln -s {input} {output}/sub-{wildcards.subject}"

def template_entities(wildcards):
    """extract BIDS entities from T1w template name for a given subject/session"""
    anat_template = TEMPLATES[wildcards.subject][wildcards.session]
    entities = dict(entity.split("-") for entity in anat_template.split("_"))
    if wildcards.subject != entities["sub"]:
        raise ValueError(
            "Using template from a different subject is not supported "
            f"(template '{anat_template}' for "
            f"sub-{wildcards.subject}_ses-{wildcards.session})."
        )
    return entities

def list_valid_runs(wildcards):
    """list available runs for a given subject/session pair"""
    runs = []
    for subject, session, entities in RUNS:
        if subject != wildcards.subject or session != wildcards.session:
            continue
        entities = dict(entity.split("-") for entity in entities.split("_"))
        runs.append(entities["run"])
    return runs

rule fmriprep_filter:
    localrule: True
    input:
        workflow.source_path("templates/bids_filter.json")
    output:
        temp("{resultsdir}/bids/derivatives/fmriprep/bids_filter_sub-{subject}_ses-{session}.json")
    params:
        template=template_entities,
        runs=list_valid_runs
    template_engine:
        "jinja2"

rule fmriprep_workdir:
    localrule: True
    output:
        temp(directory("{resultsdir}/.fmriprep_tmp/sub-{subject}_ses-{session}"))
    shell:
        "mkdir -p {output}"

def previous_session(wildcards):
    """find the previous fmriprep session folder for a given session"""

    last_session = None

    for session in TEMPLATES[wildcards.subject]:
        if session != wildcards.session:
            last_session = session
        else:
            break

    if last_session is None:
        dependency = {}
    else:
        previous = (
            f"{wildcards.resultsdir}/bids/derivatives/fmriprep/"
            f"sub-{wildcards.subject}/ses-{last_session}"
        )
        dependency = {"previous": previous}

    return dependency

rule fmriprep:
    input:
        unpack(previous_session),
        bids="{resultsdir}/bids/sub-{subject}/ses-{session}",
        bids_filter="{resultsdir}/bids/derivatives/fmriprep/bids_filter_sub-{subject}_ses-{session}.json",
        freesurfer="{resultsdir}/bids/derivatives/freesurfer_sub-{subject}_ses-{session}",
        workdir="{resultsdir}/.fmriprep_tmp/sub-{subject}_ses-{session}"
    output:
        directory("{resultsdir}/bids/derivatives/fmriprep/sub-{subject}/ses-{session}")
    container:
        "docker://nipreps/fmriprep:23.1.3"
    resources:
        cpus=lambda wildcards, threads: threads,
        mem_mb=config["fmriprep"]["mem_mb"],
        runtime=config["fmriprep"]["time_min"]
    threads: config["fmriprep"]["threads"]
    shell:
        "fmriprep {wildcards.resultsdir}/bids {wildcards.resultsdir}/bids/derivatives/fmriprep "
        "participant "
        "--participant-label {wildcards.subject} "
        "--skip-bids-validation "
        "--md-only-boilerplate "
        "--fs-subjects-dir {input.freesurfer} "
        "--output-spaces MNI152NLin2009cAsym:res-2 "
        "--stop-on-first-crash "
        "--mem-mb {resources.mem_mb} "
        "--nprocs {threads} "
        "-vv "
        "-w {config[fmriprep][workdir]} "
        "--fs-license-file {config[freesurfer][license_path]} "
        "--bids-filter-file {input.bids_filter}"

rule first_level:
    input:
        "{resultsdir}/bids/derivatives/fmriprep/sub-{subject}/ses-{session}"
    output:
        "{resultsdir}/first_level_results/sub-{subject}/ses-{session}/sub-{subject}_ses-{session}_{entity}_network-{network}_unthresholded_fc.nii.gz",
        "{resultsdir}/first_level_results/sub-{subject}/ses-{session}/sub-{subject}_ses-{session}_{entity}_network-{network}_figure.png"
    conda:
        "envs/mri.yaml"
    resources:
        cpus=lambda wildcards, threads: threads,
        mem_mb=config["first_level"]["mem_mb"],
        runtime=config["first_level"]["time_min"]
    threads: config["first_level"]["threads"]
    log:
        "{resultsdir}/first_level_results/logs/sub-{subject}_ses-{session}_{entity}_{network}.log"
    shell:
        "python workflow/scripts/first_level.py "
        "{input}/func/sub-{wildcards.subject}_ses-{wildcards.session}_{wildcards.entity}_space-MNI152NLin2009cAsym_res-2_desc-brain_mask.nii.gz "
        "{input}/func/sub-{wildcards.subject}_ses-{wildcards.session}_{wildcards.entity}_space-MNI152NLin2009cAsym_res-2_desc-preproc_bold.nii.gz "
        "{input}/func/sub-{wildcards.subject}_ses-{wildcards.session}_{wildcards.entity}_desc-confounds_timeseries.tsv "
        "{output} "
        "-a_img {config[first_level][atlas_info][image]} "
        "-a_lab {config[first_level][atlas_info][labels]} "
        "-tr {config[first_level][rep_time]} "
        "-rg {config[first_level][confounds]} "
        "-ntwk {wildcards.network} "
        "-hp {config[first_level][preprocessing][high_pass]} "
        "-lp {config[first_level][preprocessing][low_pass]} "
        "-fwhm {config[first_level][preprocessing][smooth_fwhm]} "
        "-fc {config[first_level][resting_first_level][func_conn_thresh]} "
        "-v "
        "{config[first_level][resting_first_level][extra_args]} "
        "2> {log}"
