import shutil
import pandas as pd
from pathlib import Path

configfile: 'config.yml'

def list_scans(root_folder, prefix):
    mapping = {}

    for path in Path(root_folder).iterdir():
        if not path.is_dir() and not path.suffix == ".zip":
            continue

        infos = [s.lower() for s in path.stem.replace(prefix, "").split("_")]
        if len(infos) == 2:
            infos += ["a"]
        cohort, subject, session = infos

        if path.is_dir():
            mapping[(cohort + subject, session)] = path
        else:
            mapping[(cohort + subject, session)] = path.with_suffix("")

    return mapping

MAPPING = list_scans(config["datadir"], config["ethics_prefix"])
SUBJECTS, SESSIONS = zip(*MAPPING)

rule all:
        input:
            expand(
                expand(
                    "{{resultsdir}}/bids/derivatives/mriqc/sub-{subject}",
                    subject=SUBJECTS,
                ),
                resultsdir=config["resultsdir"]
            )
            

rule unzip:
    input:
        expand("{datadir}/{{folder}}.zip", datadir=config['datadir'])
    output:
        directory(expand("{datadir}/{{folder}}", datadir=config['datadir']))
    shell:
        "unzip -q -d {output} {input}"

rule tidy_dicoms:
    input:
        lambda wildards: MAPPING[(wildards.subject, wildards.session)]
    output:
        directory("{resultsdir}/tidy/sub_{subject}/ses_{session}")
    run:
        output_folder = Path(output[0])
        for dicom_file in Path(input[0]).rglob("*.dcm"):
            target_folder = output_folder / dicom_file.parent.name
            target_folder.mkdir(parents=True, exist_ok=True)
            (target_folder / dicom_file.name).symlink_to(dicom_file)

rule heudiconv:
    input:
        "{resultsdir}/tidy/sub_{subject}/ses_{session}"
    output:
        directory("{resultsdir}/bids/sub-{subject}/ses-{session}"),
        directory("{resultsdir}/bids/.heudiconv/{subject}/ses-{session}")
    container:
        "docker://ghcr.io/jennan/heudiconv:jpeg2000_ci"
    resources:
        cpus=2,
        mem_mb=4000,
        time_min=60
    shell:
        "heudiconv "
        "--dicom_dir_template '{wildcards.resultsdir}/tidy/sub_{{subject}}/ses_{{session}}/*/*' "
        "--outdir {wildcards.resultsdir}/bids "
        "--heuristic scripts/heuristic.py "
        "--subjects {wildcards.subject} "
        "--ses {wildcards.session} "
        "--converter dcm2niix "
        "--bids "
        "--overwrite"
        
def list_bids_sessions(wildcards):
    inputs = []
    for subject, session in zip(SUBJECTS, SESSIONS):
        if subject != wildcards.subject:
            continue
        inputs.append(f"{wildcards.resultsdir}/bids/sub-{subject}/ses-{session}")
    return inputs

rule mriqc:
    input:
        list_bids_sessions
    output:
        directory("{resultsdir}/bids/derivatives/mriqc/sub-{subject}")
    container:
        "docker://nipreps/mriqc:23.0.1"
    resources:
        cpus=lambda wildcards, threads: threads,
        mem_mb=config["mriqc"]["mem_gb"]*1000,
        time_min=config["mriqc"]["time_min"]
    threads: config["mriqc"]["threads"]
    shell:
        "mriqc {wildcards.resultsdir}/bids {wildcards.resultsdir}/bids/derivatives/mriqc "
        "participant "
        "--participant-label {wildcards.subject} "
        "--mem-gb {resources.mem_mb} "
        "--nprocs {threads} "
        "--no-sub "
        "-w {wildcards.resultsdir}/work "
        
def gen_qc_file(wildcards):
    qc_file = "./qc_file.csv"
    if not qc_file.is_file():
        d = {"subject": SUBJECTS, "session": SESSIONS}
        qc_df = pd.DataFrame(data=d)
        qc_df.to_csv(qc_file)
        
    elif qc_file.is_file():
        qc_df = pd.read_csv(qc_file)
        for subject, session in zip(SUBJECTS, SESSIONS):
            if subject != wildcards.subject:
                continue
            qc_df = qc_df.append({'subject': subject, 'session': session})
        qc_df.to_csv(qc_file)
    return qc_file
        
        
        